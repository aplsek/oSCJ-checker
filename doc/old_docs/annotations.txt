@Scope(name):
    Declares that a class will only be allocated in "name". "immortal" is a
    reserved scope name. Other reserved scope names include any fully qualified
    (or maybe unqualified if in the same package?) class name of a Mission or
    ManagedEventHandler. Because these classes implicitly declare their own
    memory region, any subclass will use its own name as its executing scope
    name. That is, if we have FooMission, its parent will be "immortal", but
    FooMission.initialize() runs in "package.for.FooMission". A mission should
    declare a scope if it's nested in another mission (otherwise, it's
    guaranteed to be in immortal memory).

    Rules:
    1. Children should inherit the scope of their parent class
    2. TODO: Should interfaces be allowed @Scope?
    3. SCJ base classes automatically assume certain methods run in a different
    scope than the allocation scope. For example, Mission.initialize() runs in
    the mission memory, even though the mission is allocated in immortal memory.
    4. All methods of a class declared @Scope(name) run in the named scope by
    default, unless it is an SCJ base class. In that case, it runs in the scope
    named after the class by default. The default is overridable with @RunsIn.

@ScopeDef(name, parent):
    Assigns a scope name to a PrivateMemory.

    Rules:
    1. "immortal" and the name of any Mission/ManagedEventHandler class in the
    same package (local or fully-qualified) are reserved.
    2. Scope trees should be rooted in Mission class names. I don't think it's
    possible to enter a scope directly from immortal.

@RunsIn(name):
    Declares that a class or method runs in a certain scope.

    Rules:
    1. Some methods implicitly have a @RunsIn, such as Mission.initialize(). It
    may be better to assume this for all methods of a Mission class, except
    @RunsIn annotated methods
    2. When a class has a @Scope(foo) declaration, all of its methods are
    assumed to run in foo, except those annotated with @RunsIn(bar)
    3. Annotating a class @Scope(foo) @RunsIn(bar) means that the class is
    allocated in foo, but all methods run by bar by default, unless overriden
    with their own @RunsIn annotation. For example:
    @Scope("immortal") @RunsIn("FooMission") class FooMission extends Mission

@AllocNone:
    Declares that a method doesn't allocate objects.

@BlockFree:
    Declares that a method doesn't block through wait(), etc.
    
@SCJAllowed
    
@SCJAllowed = 0,1,2 – Application can use it at given level or higher. 
    Implication – an @SCJAllowed class must also annotate each method that is @SCJAllowed.
      Default: disallowed for SCJ applications

Verification:
@

Open Issues:
    1. Automatic scope naming doesn't work for anonymous classes. The TCK makes
    extensive use of them. Maybe disallow anonymous classes if using
    verification, because they occur extra cost at runtime?
    2. Can't annotate standard library classes. Best alternative is to use GNU
    classpath, like CDx does.
    3. How to handle int -> Integer auto-conversion? Integer i = 3; allocates
    memory, but wouldn't be detected for @AllocNone if we just search for
    constructors in the AST.

Ideas:
    1. Automatically add MemoryArea.newInstance() if the target reference is in
    a parent area.

@RunsIn covers @Nested but is more clear for functionality. I don't see what the
purpose of @Outer is. This should be known by scope tree construction.





@Allocate(value=[arealist], sameAreaAs=[references]) – The arealist is a list of permitted memory
areas to which this method may allocate objects.  Allowed values in the list are IMMORTAL, MISSION, THIS,
and CURRENT.  An empty arealist means that the method shall not create objects that are retained across
 invocations.  The references are reference arguments of the method into whose memory areas the method 
 may allocate new objects.  E.g., @Allocate(), @Allocate([CURRENT, IMMORTAL]), 
 @Allocate(sameAreaAs = ["x", "y"]), @Allocate(value = [CURRENT], sameAreaAs = ["x"]).

@MemoryAreaEncloses(inner=[references], outer=[references]) – In this method, inner references are method
 arguments that may be copied to the outer reference arguments.

@MemoryAreaSame(inner=[references], outer=[references]) – In this method, inner reference method arguments 
reside in the same memory area as outer reference arguments.



@SCJProtected – RTSJ infrastructure code not usable by the SCJ application.  Shown only for RTSJ
                compatibility.
        
@Inner, @Outer, @Scope, @ScopeDef    -- all of these are used for  scope safety only

@Pure(allocation) – method that shall not call new (even transitively)

@Pure(assignment)  -- methods that shall do no assignments into fields


