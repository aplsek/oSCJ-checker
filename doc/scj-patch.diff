### Eclipse Workspace Patch 1.0
#P jsr302
Index: scj/specsrc/java/lang/IncompatibleClassChangeError.java
===================================================================
RCS file: /home/cvs/jsr302/scj/specsrc/java/lang/IncompatibleClassChangeError.java,v
retrieving revision 1.1
diff -u -r1.1 IncompatibleClassChangeError.java
--- scj/specsrc/java/lang/IncompatibleClassChangeError.java	24 Jul 2009 02:19:57 -0000	1.1
+++ scj/specsrc/java/lang/IncompatibleClassChangeError.java	7 Jan 2010 16:38:14 -0000
@@ -35,7 +35,7 @@
    */
   @Allocate({CURRENT})
   @BlockFree
-  @SCJAllowed
+  @SCJAllowed(LEVEL_2)
   public IncompatibleClassChangeError() {
   }
   
@@ -51,7 +51,7 @@
   @Allocate({CURRENT})
   @BlockFree
   @MemoryAreaEncloses(inner = {"this"}, outer = {"msg"})
-  @SCJAllowed
+  @SCJAllowed(LEVEL_2)
   public IncompatibleClassChangeError(String msg) {
   }
 
Index: scj/specsrc/javax/safetycritical/PrivateMemory.java
===================================================================
RCS file: /home/cvs/jsr302/scj/specsrc/javax/safetycritical/PrivateMemory.java,v
retrieving revision 1.2
diff -u -r1.2 PrivateMemory.java
--- scj/specsrc/javax/safetycritical/PrivateMemory.java	29 Sep 2009 08:16:27 -0000	1.2
+++ scj/specsrc/javax/safetycritical/PrivateMemory.java	7 Jan 2010 16:38:14 -0000
@@ -7,11 +7,12 @@
 import javax.safetycritical.annotate.BlockFree;
 import javax.safetycritical.annotate.MemoryAreaEncloses;
 import javax.safetycritical.annotate.SCJAllowed;
+import javax.safetycritical.annotate.SCJProtected;
 
 @SCJAllowed
 public class PrivateMemory extends LTMemory implements ManagedMemory
 {
-  @SCJAllowed
+  @SCJProtected
   public PrivateMemory(long size) { super(size); }
 
   /**
Index: scj/specsrc/javax/safetycritical/InterruptHappening.java
===================================================================
RCS file: /home/cvs/jsr302/scj/specsrc/javax/safetycritical/InterruptHappening.java,v
retrieving revision 1.3
diff -u -r1.3 InterruptHappening.java
--- scj/specsrc/javax/safetycritical/InterruptHappening.java	21 Oct 2009 10:22:26 -0000	1.3
+++ scj/specsrc/javax/safetycritical/InterruptHappening.java	7 Jan 2010 16:38:14 -0000
@@ -2,48 +2,49 @@
 
 import javax.realtime.Happening;
 import javax.safetycritical.annotate.SCJAllowed;
+import static javax.safetycritical.annotate.Level.LEVEL_1;
 
   /**
    *
    */
-@SCJAllowed
+@SCJAllowed(LEVEL_1)
 public class InterruptHappening extends Happening {
 
  /**
    *
    */
-  @SCJAllowed
+  @SCJAllowed(LEVEL_1)
   public InterruptHappening() {};
 
   /**
    *
    */
-  @SCJAllowed
+  @SCJAllowed(LEVEL_1)
   public InterruptHappening(int id) {};
 
   /**
    *
    */
-  @SCJAllowed
+  @SCJAllowed(LEVEL_1)
   public InterruptHappening(int id, String name) {};
 
   /**
    *
    */
-  @SCJAllowed
+  @SCJAllowed(LEVEL_1)
   public InterruptHappening(String name) {};
   
   
   /**
    *
    */
-  @SCJAllowed
+  @SCJAllowed(LEVEL_1)
   protected synchronized void process()  {}; 
   
   /**
    *
    */
-  @SCJAllowed
+  @SCJAllowed(LEVEL_1)
   public final int getPriority(int id)   { return 1;};
   
 }
Index: scj/specsrc/javax/safetycritical/Terminal.java
===================================================================
RCS file: /home/cvs/jsr302/scj/specsrc/javax/safetycritical/Terminal.java,v
retrieving revision 1.1
diff -u -r1.1 Terminal.java
--- scj/specsrc/javax/safetycritical/Terminal.java	2 May 2009 15:39:31 -0000	1.1
+++ scj/specsrc/javax/safetycritical/Terminal.java	7 Jan 2010 16:38:14 -0000
@@ -14,6 +14,7 @@
 package javax.safetycritical;
 
 import javax.safetycritical.annotate.SCJAllowed;
+import javax.safetycritical.annotate.SCJProtected;
 
 /**
  * A simple Terminal that puts out UTF8 version of String/StringBuilder,....
@@ -28,6 +29,7 @@
 
 	private static Terminal single = new Terminal();
 	
+	@SCJProtected
 	private Terminal() {	
 	}
 	
@@ -87,6 +89,7 @@
 	 * Does the actual work. Change for your implementation.
 	 * @param b A UTF8 byte to be written.
 	 */
+	@SCJProtected
 	private void write(byte b) {
 		// System.out.write(b);
 	}
Index: scj/specsrc/javax/safetycritical/MissionMemory.java
===================================================================
RCS file: /home/cvs/jsr302/scj/specsrc/javax/safetycritical/MissionMemory.java,v
retrieving revision 1.1
diff -u -r1.1 MissionMemory.java
--- scj/specsrc/javax/safetycritical/MissionMemory.java	2 May 2009 15:39:30 -0000	1.1
+++ scj/specsrc/javax/safetycritical/MissionMemory.java	7 Jan 2010 16:38:14 -0000
@@ -9,15 +9,16 @@
 import javax.safetycritical.annotate.BlockFree;
 import javax.safetycritical.annotate.MemoryAreaEncloses;
 import javax.safetycritical.annotate.SCJAllowed;
+import javax.safetycritical.annotate.SCJProtected;
 import javax.safetycritical.annotate.Allocate.Area;
 
-
+@SCJAllowed
 class MissionMemory extends LTMemory implements ManagedMemory
 {
   /**
    * @param size is the amount of memory that this area can hold.
    */
-  @SCJAllowed(LEVEL_1)
+  @SCJProtected
   public MissionMemory(SizeEstimator size) { super(size); }
 
   /**
@@ -54,7 +55,7 @@
    * think I really want to say that this.scope-level encloses logic.
    */
   @MemoryAreaEncloses(inner = {"logic"}, outer = {"this"})
-  @SCJAllowed()
+  @SCJProtected
   public final void enter(Runnable logic) {}
   
   /**
Index: scj/specsrc/javax/realtime/LTMemory.java
===================================================================
RCS file: /home/cvs/jsr302/scj/specsrc/javax/realtime/LTMemory.java,v
retrieving revision 1.1
diff -u -r1.1 LTMemory.java
--- scj/specsrc/javax/realtime/LTMemory.java	2 May 2009 15:39:30 -0000	1.1
+++ scj/specsrc/javax/realtime/LTMemory.java	7 Jan 2010 16:38:14 -0000
@@ -28,7 +28,7 @@
    * specifies that finalization of LTMemory regions is not performed.
    */
   @BlockFree
-  @SCJAllowed(LEVEL_1)
+  @SCJProtected
   public void enter(Runnable logic) {}
 
   @BlockFree
Index: scj/specsrc/javax/realtime/RealtimeThread.java
===================================================================
RCS file: /home/cvs/jsr302/scj/specsrc/javax/realtime/RealtimeThread.java,v
retrieving revision 1.7
diff -u -r1.7 RealtimeThread.java
--- scj/specsrc/javax/realtime/RealtimeThread.java	29 Sep 2009 09:25:00 -0000	1.7
+++ scj/specsrc/javax/realtime/RealtimeThread.java	7 Jan 2010 16:38:14 -0000
@@ -100,6 +100,7 @@
    * Allocates no memory. Treats the implicit this argument as a variable
    * residing in scoped memory. 
    */
+  @SCJAllowed(LEVEL_2)
   public void start() {}
   
   public void release() {}
Index: scj/specsrc/javax/safetycritical/annotate/SuppressSCJ.java
===================================================================
RCS file: scj/specsrc/javax/safetycritical/annotate/SuppressSCJ.java
diff -N scj/specsrc/javax/safetycritical/annotate/SuppressSCJ.java
--- /dev/null	1 Jan 1970 00:00:00 -0000
+++ scj/specsrc/javax/safetycritical/annotate/SuppressSCJ.java	1 Jan 1970 00:00:00 -0000
@@ -0,0 +1,5 @@
+package javax.safetycritical.annotate;
+
+public @interface SuppressSCJ {
+
+}
