Changes in Annotations
==========================================

@RunsIn on constructors
- RunsIn annotations are not allowed on constructors.
- constructors run in the same scope as is the @Scope of the Type
- e.g.  
  @Scope("TM")
  static class SubmissionCoordination {
    int status;
    @RunsIn(IMMORTAL)  // TODO: shouldn't this class be @Scope(IMMORTAL)?
    SubmissionCoordination() {
      status = 0;
    }
   

@RunsIn(CURRENT) 
- deleted
- now equivalent to @RunsIn(THIS) and this value is given by default

Generics
 - not supported by the checker yet.
 - commenting out generics
 
@SCJRestricted(INITIALIZATION)
- adding this annotation on all constructors of sequencers/missions

TrainClock:
- getTime() and drivesEvents() method were missing @SCJRestricted(maySelfSuspend = false)
- when overriding, the annotations must be restated.

@DefineScope
- can be placed only on classes and on variables/fields of types that implement AllocationContext
- all other @DefineScope annotaitons are ignored. Eg.g placing @DefineScope at "handleAsyncEvent()" does not have any effect.

handleAsyncEvent
- some of these methods were annotated @Scope(..), it should probably be @RunsIn
- also, @Scope on a method that returns void/primitive is prohibited


NoHeapRealtimeThread
- the example is using javax.safetycritical.NoHeapRealtimeThread but the SPEC does not define this class.

@SCJAllowed
- most of the classes have missing @SCJAllowed
- LEVEL_0 issues
    - TrainClock
    - is using ClockCallBack which is LEVEL 1.
    SynchronizedTime
        - Services.setCeiling(this, CEILING) method is LEVEL_1
- I have commented out these lines so that the checker may continue with the checking. The order of the verification is 1. SCJAllowed errors 2. SCJRestricted errors 3. @Scope related errors. 
    
Duplicate @DefineScope definitions
- MO_Private for  MobileOversight and for ModulatedOversight, changed to MOB_Private and MOD_Private
- SO_Private for SecurityOversight, 
- the same for SIH_Private and MIH_Private


InterruptServiceRoutine
the "handle()" method, it should be @SCJAllowed(SUPPORT) , no?


TrainMission 
- there was a problem with the TrainMission scope
- originally, the class was @Scope(IMMORTAL) but several of its fields (e.g. TrainControlSequencer controlsq) are annotated @Scope("TM") --> this produces an error, since we can not reference objects in child scopes
- after putting TrainMission class into @Scope("TM"), checker is happy.

- a similar problem occurs with "TimverOversight" and "TimeService" classes that lives in @Scope("C") but reference e.g. CommunicationsQueue that lives in @Scope("TM") - a sibling scope to "C".
--> Thanks to this I discovered one of the bugs in our checker - the report of this error is misleading, we will need to fix this. It should not be difficult.


Runnable interface
- at all places where a run method from a Runnable interface is implemented (e.g. NoHeapRealtimeThread) and has a @RunsIn annotation, the checker reports an error - @RunsIn cannot be overriden. The solution using SCJRunnable (which is implemented by the Checker) does not fully covers all the cases : e.g. MemoryArea.executeInArea(), NoHeapRealtimeThread.run(), etc. 
We will probably need to find a better solution to this problem.
 





=========================

Second Phase:


1)  missing annotation in SCJ API:
CommunicationsQueue.java : 269: Cannot assign expression in scope TM to variable in scope CALLER
@RunsIn(CALLER)
  void initialize() {
    Services.setCeiling(this, my_ceiling);
  }
---> the Services.setCeiling is @RunsIn(THIS)


2)  String "...." : 
/Users/plsek/fiji/scj-dan/oSCJ/tools/checker/examples/railsegment/CommunicationsQueue.java:322: Cannot assign expression in scope IMMORTAL to variable in scope CALLER.
        internalError("Buffer not found on reserved list");
                     ^
changed to :  internalError(new String("Buffer not found on reserved list"));
  
the same in:
 -  CommunicationsQueue.java:322  
 - ModulatedInterruptHandler.java:45
 - SecurityInterruptHandler.java:48
 - SatInterruptHandler.java:45
 MobileInterruptHandler.java:44
 
 (perhaps this is a limitation of the checker: it automatically assumes the "..." strings to be IMMORTAL)
 
3) bad assignment:
/Users/plsek/fiji/scj-dan/oSCJ/tools/checker/examples/railsegment/CypherQueue.java:121: Cannot assign expression in scope IMMORTAL to variable in scope A.
      encryption_buffer = buffer;
                        ^
  where:
      @Scope("A")       encryption_buffer         
       @Scope(IMMORTAL) buffer                 

changed to : @Scope(IMMORTAL) encryption_buffer    

and then CypherQueue.java:201 and 336:  the  getBuffer() method made to return @Scope(IMMORTAL)


4)   CommunicationsQueue : 520
should the "buffer" be @Scope(IMMORTAL) or @Scope("TM")?? 
- probably @Scope("TM") - because that is a scope of the enclosing class

And then, for the set method I have changed:
 @RunsIn(CALLER)  @Scope("TM") //BEFORE: @Scope(IMMORTAL)
  public final byte[] getCommandBuffer(int command_ndx) {
    return buffers[command_ndx];
  }

Finally, everytime the getBuffer() is called, we store the result in @Scope("TM") var,
this is OK since in all the cases the internal_buffer is treated as read-only:  
  @Scope("TM") byte[] internal_buffer = getBuffer(buffer_no);


An opposite example of an immortal buffer is a buffer in CypherQueue that is explicitly annotated: 
@Scope(IMMORTAL) byte[] encryption_buffer;

This buffer is used by "SecurityOversight":   buffer = cypher_data.getBuffer();
And so this local variable must be also explicitly immortal:
 @Scope(IMMORTAL) byte[] buffer


5) NavigationService:

 @RunsIn(CALLER)
  synchronized void updatePosition( @Scope(UNKNOWN) AbsoluteTime time_stamp) {
     update_time.set(time_stamp);
  }
  
6) SCJ API annotations changed:

javax.safetycritical.Services

@RunsIn(CALLER)
public static void setCeiling(@Scope(UNKNOWN) Object o, int pri) {}  
  
7)
 