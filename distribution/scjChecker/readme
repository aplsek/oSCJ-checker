SCJ-Checker, v.1.0
          
readme author: Ales Plsek, aplsek@purdue.edu
date: 06-15-2010
  
Project Homepage: http://www.ovmj.net/oscj/      
Submit bug reports, comments and feedback: 
   bug-report : http://code.google.com/p/scj-jsr302/issues/list
   feed-back : http://sss.cs.purdue.edu/projects/oscj/authors/authors.html





1. Installation
----------------------------------------

This section describes how to install the binary release of the SCJ-Checker. 

Requirement: You must have JDK 6 or later installed. You can get JDK 6 from Sun or elsewhere.


1.2.1  Unix/Linux/MacOS installation
-----------------------------------------

These instructions assume that you use the bash or sh shell. If you use a different shell, you may need to slightly adjust the commands.



1. From JSR302 CVS:
--------------------------
     1. Update your JSR302 directory
     2. You can find the checker distribution is in /check directory
 
2. Distribution Download
--------------------------
Download the latest Checker Framework distribution and unzip it. You can put it anywhere you like; a standard place is in a new sub-directory named scjChecker in your JSR-302 directory.

        # wget http://.../scjChecker.tar.bz2
        curl -O  http://.../scjChecker.tar.bz2
        tar yxf scjChecker.tar.bz2
        chmod +x scjChecker/check.sh
     
     
     
2. Launching the SCJ-Checker
----------------------------------------

0. Testing your distribution
--------------------------

Launch the *runtests.py* script. This script will check the source files from the /tests directory and will verify the output. You should see:

NOTE: you must provide a patch to:
    - test sources
    - binaries of SCJ specification to compile the source examples (oSCJ implementation can be used as well)

python runtests.py  --scj-path ./build/src/:/Users/plsek/_work/workspace_RT/scj-current/bin
.................................................................................................
97 tests total, 0 failed, 97 succeeded.




1. Running the Checker
-----------------------
Run the check.sh script to launch the checking, you must provide a source directory with the source-files to be checked.
   
Example:
  ./check.sh ../scj/specsrc/
where:
  ../scj/specsrc/ - directory where to find source-files to check
  
  
  
2. Understanding the output
-----------------------
The checker should not print anything. Any output is sign of a badly annotated program. Currently there are about 80+ errors in the spec and RI. We should discuss who will fix those errors. Basically, we need more annotationsin the SPEC/RI dirs.        
      
      
        
2.1   Compilation
-----------------------
The checker is in fact a javac compiler that will be shipped with Java 7. Before any @SCJ-Annotation errors can be provided, the compiler will compile the whole source code and report any compilations errors that will be found. 

Note: No @SCJ-Annotation checking is done if there are any compilation errors in the source code. 
        
     
     
        
2.2 SCJ Checking
-----------------------
See the oSCJ home page for explanations of different SCJ-Annotation errors.
Note: SCJ-Annotation errors are reported as warnings (-Awarns) to detect all the annotation errors. Without the  -Awarns param, only 1 annotation-error at a time is reported. This behavior is in compliance with the Java7 Checker Framework.             
        
        
        
        
3. Checking the Spec and RI
-----------------------
  for the spec:
     ./specCheck.sh 
  for RI:
   ./riCheck.sh
   
   
   
4. Case-Study checking
=-------------------------

Checking miniCDj:
run
$ ./miniCDx.sh $miniCDX_HOME

For example:  $./miniCDx.sh /Users/plsek/workspace/miniCDx-J4

NOTE: you need to specify the path leading to the home of miniCDx distribution



5. Using Checker in general
=-------------------------

We provide the *check.sh* script, you just need to provide a path to the directory where the source-files you want to check are places.

Then execute::

$ ./miniCDx.sh $SRC_INPUT

For example:  
$./check.sh /Users/plsek/workspace/miniCDx-J4
   